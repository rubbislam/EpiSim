{
  "hash": "07199bff7fe34e960d3407aff2a45612",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Simulation\"\nauthor: \"Qianying (Ruby) Lin\"\ntoc: true\nformat:\n  html:\n    embed-resources: true\n    code-background: true\nengine: knitr\n---\n\n\n\n## Summary\n\n-   Compartment model introduction\n    -   SIR model, deterministic\n    -   SIR model, stochastic\n-   Model with observations\n    -   SIR model with a diagnosis compartment\n-   Partially Observed Markov Process (POMP)\n    -   state process and measurement model\n    -   SIR model in a POMP model\n\n## Installation of related packages\n\nWe will be using `pomp`, `tidyverse`, and `ggplot2` across this series of sessions. For Windows users, please go to <https://cran.r-project.org/bin/windows/Rtools/>, download and install `RTools 4.4` first. For all platform users, please install `pomp` by running command\n\n```         \ninstall.packages(\"pomp\")\n```\n\nwithin RStudio Console.\n\n## Introduction to Epidemiological Compartmental Models\n\nCompartment models, such as Susceptible-Infected-Recovered (SIR) model, divide the total population into different groups (i.e., compartments) and model the dynamics for each group by incorporating transitions between them. We can use diagrams to illustrate the model structures and the events (transitions) between compartments and formulate the dynamics using ODEs.\n\n### Example: SIR model\n\n![**SIR model diagram**. Three compartments are included in this presented SIR model, with two events: transmission (i.e. S to I) with per-capita rate $\\beta\\,I$ and recovery (i.e. I to R) with per-capita rate $\\gamma$.](SIR.png){width=\"300\"}\n\n\n\n```{=tex}\n\\begin{aligned}\n  \\frac{d S}{d t} &= -\\beta S \\frac{I}{N} \\\\\n  \\frac{d I}{d t} &= \\beta S \\frac{I}{N} - \\gamma I \\\\\n  \\frac{d R}{d t} &= \\gamma I \\\\\n  N &= S + I + R\n\\end{aligned}\n```\n\n\n## Simulate the SIR model\n\n### A deterministic model\n\nBased on the ODEs, we can write a function to simulate **one-step-transition** of the deterministic SIR model:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsir_determ_step <- function (S, I, R, N, Beta, gamma, delta.t, ...) {\n  dN_SI <- Beta * I * S / N * delta.t\n  dN_IR <- gamma * I * delta.t\n  S <- S - dN_SI\n  I <- I + dN_SI - dN_IR\n  R <- R + dN_IR\n  return (c(S = S, I = I, R = R))\n}\n```\n:::\n\n\n\nTo simulate the full dynamics of the proposed SIR model, we also need the initial values for $S$, $I$, and $R$, which we denote as $S_0$, $I_0$, and $R_0$.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsir_init <- function (S0, I0, R0) {\n  return(c(S = S0, I = I0, R = R0))\n}\n```\n:::\n\n\n\nNow we can combine the initialization function and the one-step-transition function to simulate the deterministic SIR dynamics:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# initialize the system\ninits <- sir_init(S0=9999, I0=1, R0=0)\n# restore the results\nresults <- data.frame(t = 0, S = inits[1], I = inits[2], R = inits[3])\n# the end time and time step\nt <- 0\ntend <- 200\ndelta.t <- 1\n# parameter setting\nparams <- c(Beta = 0.1, gamma = 0.01)\nwhile (t < tend) {\n  t <- t + delta.t\n  prev_states <- results[nrow(results),]\n  current_states <- sir_determ_step(\n    S = prev_states$S,\n    I = prev_states$I,\n    R = prev_states$R,\n    N = prev_states$S + prev_states$I + prev_states$R,\n    Beta = params[\"Beta\"],\n    gamma = params[\"gamma\"],\n    delta.t = delta.t\n  )\n  results <- rbind(\n    results,\n    c(t = t, S = current_states[1], I = current_states[2], R = current_states[3])\n  )\n}\n\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(data = results, aes(x = t)) +\n  geom_line(aes(y = S), color=\"darkgreen\") + \n  geom_line(aes(y = I), color=\"red\")+ \n  geom_line(aes(y = R), color=\"blue\") +\n  labs(x = \"time\", y = \"population\") +\n  theme_minimal() -> p_determin\n\np_determin\n```\n\n::: {.cell-output-display}\n![](simulation_files/figure-html/sir-determ-sim-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# zoom-in\np_determin +\n  coord_cartesian(xlim=c(120,130), ylim=c(6e3, 7e3))\n```\n\n::: {.cell-output-display}\n![](simulation_files/figure-html/sir-determ-sim-2.png){width=672}\n:::\n:::\n\n\n\n### A stochastic model\n\nTo make the model more realistic, we incorporate some level of stochasticity in each transitions assuming the number of individuals in each transitions follows a binomial distribution:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsir_stoch_step <- function (S, I, R, N, Beta, gamma, delta.t, ...) {\n  dN_SI <- rbinom(n=1, size=S, prob=1-exp(-Beta * I / N * delta.t))\n  dN_IR <- rbinom(n=1, size=I, prob=1-exp(-gamma * delta.t))\n  S <- S - dN_SI\n  I <- I + dN_SI - dN_IR\n  R <- R + dN_IR\n  return (c(S = S, I = I, R = R))\n}\n```\n:::\n\n\n\nAgain we can simulate this stochastic SIR model:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# initialize the system\ninits <- sir_init(S0=9999, I0=1, R0=0)\n# restore the results\nresults <- data.frame(t = 0, S = inits[1], I = inits[2], R = inits[3])\n# the end time and time step\nt <- 0\ntend <- 200\ndelta.t <- 1\n# parameter setting\nparams <- c(Beta = 0.1, gamma = 0.01)\nwhile (t < tend) {\n  t <- t + delta.t\n  prev_states <- results[nrow(results),]\n  current_states <- sir_stoch_step(\n    S = prev_states$S,\n    I = prev_states$I,\n    R = prev_states$R,\n    N = prev_states$S + prev_states$I + prev_states$R,\n    Beta = params[\"Beta\"],\n    gamma = params[\"gamma\"],\n    delta.t = delta.t\n  )\n  results <- rbind(\n    results,\n    c(t = t, S = current_states[1], I = current_states[2], R = current_states[3])\n  )\n}\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\nggplot(data = results, aes(x = t)) +\n  geom_line(aes(y = S), color=\"darkgreen\") + \n  geom_line(aes(y = I), color=\"red\") + \n  geom_line(aes(y = R), color=\"blue\") +\n  labs(x = \"time\", y = \"population\") +\n  theme_minimal() -> p_stoch\n\np_stoch\n```\n\n::: {.cell-output-display}\n![](simulation_files/figure-html/sir-stoch-sim-1.png){width=672}\n:::\n\n```{.r .cell-code}\np_stoch +\n  coord_cartesian(xlim=c(120,130), ylim=c(6e3, 7e3))\n```\n\n::: {.cell-output-display}\n![](simulation_files/figure-html/sir-stoch-sim-2.png){width=672}\n:::\n:::\n\n\n\n### Try some other models?\n\n## SIR model + observations\n\nUnfortunately, we don't observed all states ($S$, $I$, and $R$).\n\n### SIR model with a diagnosis compartment\n\nWe assume that the infections (i.e. patients) go to the hospitial and get diagnosed and denote this new compartment as $D$:\n\n![**SIR + Diagnosis model diagram**.](SIRD.png){width=\"300\"}\n\n\n\n```{=tex}\n\\begin{aligned}\n  \\frac{d S}{d t} &= -\\beta S \\frac{I}{N} \\\\\n  \\frac{d I}{d t} &= \\beta S \\frac{I}{N} - \\gamma I \\\\\n  \\frac{d R}{d t} &= \\gamma I \\\\\n  \\frac{d D}{d t} &= \\gamma I \\\\\n  N &= S + I + R\n\\end{aligned}\n```\n\n\nNow we define a new one-step-transition function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsird_stoch_step <- function (S, I, R, N, D, Beta, gamma, delta.t, ...) {\n  dN_SI <- rbinom(n=1, size=S, prob=1-exp(-Beta * I / N * delta.t))\n  dN_IR <- rbinom(n=1, size=I, prob=1-exp(-gamma * delta.t))\n  S <- S - dN_SI\n  I <- I + dN_SI - dN_IR\n  R <- R + dN_IR\n  D <- D + dN_IR\n  return (c(S = S, I = I, R = R, D = D))\n}\n```\n:::\n\n\n\nwith the new initialization function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsird_init <- function (S0, I0, R0, D0=0) {\n  return(c(S = S0, I = I0, R = R0, D = D0))\n}\n```\n:::\n\n\n\n## Partially Observed Markov Process (POMP)\n\nWhat's worse, we cannot even observe the true values of any state. We only have partial observations within a period of time, let's say, 7 days.\n\n### State process and measurement model\n\nIn the POMP model, we have two main components: the underlying state process and measurement model to the observations.\n\n![**POMP structure**.](POMP.png){width=\"300\"}\n\nLet's break it into details, defining the underlying state process as $X_t$ and the observed measurements as $Y_t$, both of which are markovian.\n\n![**POMP schematic**.](POMP2.png){width=\"500\"}\n\n### SIR model in a POMP model\n\nNow we can define the **state process** as a stochastic SIR model, $X_t = (S_t, I_t, R_t, D_t)$, where we call $D_t$ as the weekly cumulative diagnoses, which **resets to 0** every 7 days.\n\nWe further can define a weekly measurement model: $$\n\\textrm{reports}_t \\sim \\textrm{NegBin}(\\rho D_t, k),\n$$ where $\\rho$ is the reporting ratio and $k$ is the dispersion parameter in the Negative Binomial distribution. Of course, we can also define the measurement model as a Binomial distribution or Poisson distribution.\n\nUsing this measurement model, we can have the probability a case report given the true diagnoses, as well as simulate the reported cases based on the SIR with diagnosis model:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## density/probability\nsird_dmeas <- function (reports, D, rho, k, log, ...) {\n  dnbinom(x=reports, size=k, mu=rho*D, log=log)\n}\n\n## simulation\nsird_rmeas <- function (D, rho, k, ...) {\n  return (c(reports=rnbinom(n=1, size=k, mu=rho*D)))\n}\n```\n:::\n\n\n\nWe can update the **one-step transition** function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsird_stoch_pomp_step <- function (S, I, R, N, D, Beta, gamma, t, delta.t, cum_step, ...) {\n  dN_SI <- rbinom(n=1, size=S, prob=1-exp(-Beta * I / N * delta.t))\n  dN_IR <- rbinom(n=1, size=I, prob=1-exp(-gamma * delta.t))\n  S <- S - dN_SI\n  I <- I + dN_SI - dN_IR\n  R <- R + dN_IR\n  if (t %% cum_step == 1)  D <- 0\n  D <- D + dN_IR\n  return (c(S = S, I = I, R = R, D = D))\n}\n```\n:::\n\n\n\nNow we can simulate the underlying SIRD models and the reported cases:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# initialize the system\ninits <- sird_init(S0=9999, I0=1, R0=0, D0=0)\n# restore the results\nresults <- data.frame(t = 0, S = inits[1], I = inits[2], R = inits[3], D = inits[4], reports = 0)\n# the end time and time steps\nt <- 0\ntend <- 200\ndelta.t <- 1\ncum_step <- 7\n# parameter setting\nparams <- c(Beta = 0.1, gamma = 0.01, rho=0.2, k=3)\nwhile (t < tend) {\n  t <- t + delta.t\n  prev_states <- results[nrow(results),]\n  current_states <- sird_stoch_pomp_step(\n    S = prev_states$S,\n    I = prev_states$I,\n    R = prev_states$R,\n    N = prev_states$S + prev_states$I + prev_states$R,\n    D = prev_states$D, \n    Beta = params[\"Beta\"],\n    gamma = params[\"gamma\"],\n    t = t,\n    delta.t = delta.t,\n    cum_step = cum_step\n  )\n  reports <- 0\n  if (t %% cum_step == 0)\n    reports <- sird_rmeas(D = current_states[4], rho = params[\"rho\"], k = params[\"k\"])\n  results <- rbind(\n    results,\n    c(t = t, S = current_states[1], I = current_states[2], R = current_states[3], D = current_states[4], reports = reports[1])\n  )\n}\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\nggplot(data = results, aes(x = t)) +\n  geom_line(aes(y = S), color=\"darkgreen\") + \n  geom_line(aes(y = I), color=\"red\") + \n  geom_line(aes(y = R), color=\"blue\") +\n  geom_line(aes(y = D), color=\"grey\") +\n  geom_step(aes(y = reports), color=\"black\") +\n  labs(x = \"time\", y = \"population\") +\n  scale_y_log10() +\n  theme_minimal() -> p_stoch_pomp\n\np_stoch_pomp\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in scale_y_log10(): log-10 transformation introduced infinite values.\nlog-10 transformation introduced infinite values.\nlog-10 transformation introduced infinite values.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](simulation_files/figure-html/sird-stoch-pomp-sim-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "simulation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}