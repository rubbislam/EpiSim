[
  {
    "objectID": "simulation.html",
    "href": "simulation.html",
    "title": "Simulation of stochastic dynamic models",
    "section": "",
    "text": "Lecture materials\nzip\n\n\nReference Recording (2020)\nVideo (98 min)"
  },
  {
    "objectID": "iterated.html",
    "href": "iterated.html",
    "title": "Iterated filtering: principles and practice",
    "section": "",
    "text": "Lecture materials 1\nzip\n\n\nLecture materials 2\nzip\n\n\nWorkflow\npdf\n\n\nReference Recording (2020,2021)\nVideo (110 min)"
  },
  {
    "objectID": "instruction.html",
    "href": "instruction.html",
    "title": "Instruction",
    "section": "",
    "text": "Please read the appropriate sections below, which give specific instructions for installing and testing the software we will be using. First follow the instructions for “all users”, then those for your specific operating system (OS)."
  },
  {
    "objectID": "instruction.html#all-users",
    "href": "instruction.html#all-users",
    "title": "Instruction",
    "section": "All users",
    "text": "All users\n\nInstall R and RStudio\nR and RStudio are free and open-source. You’ll need at least version 4.2.0 of R. Source code and binaries are available on CRAN (https://cran.r-project.org/). Install the latest version of RStudio from rstudio.com.\nFor Windows users, there is a video tutorial on the installation of R and Rstudio.\n\n\nInstall needed packages\nOpen a session in RStudio and run the following:\n\nupdate.packages()\nsource(\"https://kingaa.github.io/sbied/prep/packages.R\")\n\n[The &gt; is the command prompt; it is not part of the command. Also, the quotation marks are plain keyboard double quotes.]\nThe first command updates your installed packages. You may be prompted to specify a CRAN mirror: choose one geographically near you. In RStudio, you can also push the “Update” button on the “Packages” tab to accomplish this.\nThe second command runs a script on my website. It will install some needed packages if these are not already installed on your system."
  },
  {
    "objectID": "instruction.html#windows-users",
    "href": "instruction.html#windows-users",
    "title": "Instruction",
    "section": "Windows users",
    "text": "Windows users\nIf your machine runs Windows, you must install Rtools. This will give you the ability to compile C code and dynamically link it into an R session.\nDownload Rtools from CRAN and install it. A video tutorial demonstrating how to install Rtools is available, as are detailed installation instructions. Note that, after installation, there is one more step to be completed.\nIt is essential that you install these tools before the course starts!"
  },
  {
    "objectID": "instruction.html#macos-users",
    "href": "instruction.html#macos-users",
    "title": "Instruction",
    "section": "MacOS users",
    "text": "MacOS users\nSo that you can compile C code and dynamically link it into an R session, you will need to have the Xcode app installed. This is gratis and can be installed via the App Store or downloaded from developer.apple.com. Video tutorials demonstrating how to check if you need to install Xcode, how to install Xcode, and how to install pomp once you have installed Xcode are available.\nNote that you must go beyond merely installing the Xcode app. After you’ve installed the app, open a unix terminal (listed as the Terminal app under “Utilities” in the Finder) and run the following line\n\nxcode-select --install\n\nThis will install the “Command Line Tools” that are needed to compile native C codes. Running this command is tantamount to the part of the Xcode installation tutorial video where we complete the installation using the graphical user interface."
  },
  {
    "objectID": "instruction.html#all-users-1",
    "href": "instruction.html#all-users-1",
    "title": "Instruction",
    "section": "All users",
    "text": "All users\n\nTest pomp\nOpen a session in RStudio and run the following:\n\nsource(\"https://kingaa.github.io/scripts/pompTest.R\")\n\nThis will check whether you can work with pomp.\nIf it fails, try the following:\n\nsource(\"https://kingaa.github.io/scripts/helloC.R\",echo=TRUE)\n\nIf this fails to give the “Hello!” message, you will need to follow the instructions below corresponding to your OS before re-trying the pompTest.R script."
  },
  {
    "objectID": "instruction.html#troubleshooting",
    "href": "instruction.html#troubleshooting",
    "title": "Instruction",
    "section": "Troubleshooting",
    "text": "Troubleshooting\n\nLinux and unix users\nIf you have trouble with any of the scripts above, make sure you have the GNU compiler collection (GCC), including gfortran, installed on your computer. Linux distributions typically include this by default but it is not impossible that you have somehow avoided this.\n\n\nMacOS users\nIf the pompTest.R script fails because you cannot load pomp, try installing it from source. The easiest way to do this is to execute\n\ninstall.packages(\"pomp\",repos=\"https://kingaa.github.io/\")\n\nin an R session. You can also use the devtools package. Do\n\ninstall.packages(\"devtools\")\nlibrary(devtools)\ninstall_github(\"kingaa/pomp\")\n\nIf, while trying to install from source, you receive the error,\n\nmake: gfortran-8.2: No such file or directory\n\nor one that otherwise refers to gfortran, then it is likely that you do not have the necessary version of gfortran installed. Have a look at these instructions and contact me at the address above if these don’t work for you.\nSome users have reported receiving an error complaining that\n\n'stdlib.h' file not found\n\nThis indicates that the command-line tools from Xcode have not been properly installed. In a unix terminal, run\n\nxcode-select --install\n\nto correct this problem.\n\n\nWindows users\nYou have probably failed to install the Rtools correctly. Revisit the instructions above.\n\nPre-course instructions for Windows users (Video)\nPre-course instructions for MacOS users (Video)"
  },
  {
    "objectID": "forecast.html",
    "href": "forecast.html",
    "title": "Epidemic forecasting with pomp",
    "section": "",
    "text": "Lecture materials\nzip"
  },
  {
    "objectID": "Bayesian.html",
    "href": "Bayesian.html",
    "title": "Bayesian statistics and PMCMC in pomp",
    "section": "",
    "text": "Lecture materials\nzip"
  },
  {
    "objectID": "extensions.html",
    "href": "extensions.html",
    "title": "Derivative packages from pomp",
    "section": "",
    "text": "In this lesson, we aim to introduce three main derivative packages: panelPomp, spatPomp, and phylopomp.\n\n\n\n \n \n\n\n\n\nLecture materials\nzip"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Simulation-based Inference for Epidemiological Dynamics",
    "section": "",
    "text": "This module introduces statistical inference techniques and computational methods for dynamic models of epidemiological systems. The course will explore deterministic and stochastic formulations of epidemiological dynamics and develop inference methods appropriate for a range of models. Special emphasis will be on exact and approximate likelihood as the key elements in parameter estimation, hypothesis testing, and model selection. Specifically, the course will cover sequential Monte Carlo and synthetic likelihood techniques. Students will learn to implement these in R to carry out maximum likelihood and Bayesian inference. Knowledge of the material in Module 1 is assumed. Students new to R should complete a tutorial before the module."
  },
  {
    "objectID": "index.html#module-description",
    "href": "index.html#module-description",
    "title": "Simulation-based Inference for Epidemiological Dynamics",
    "section": "",
    "text": "This module introduces statistical inference techniques and computational methods for dynamic models of epidemiological systems. The course will explore deterministic and stochastic formulations of epidemiological dynamics and develop inference methods appropriate for a range of models. Special emphasis will be on exact and approximate likelihood as the key elements in parameter estimation, hypothesis testing, and model selection. Specifically, the course will cover sequential Monte Carlo and synthetic likelihood techniques. Students will learn to implement these in R to carry out maximum likelihood and Bayesian inference. Knowledge of the material in Module 1 is assumed. Students new to R should complete a tutorial before the module."
  },
  {
    "objectID": "index.html#course-objectives",
    "href": "index.html#course-objectives",
    "title": "Simulation-based Inference for Epidemiological Dynamics",
    "section": "Course objectives",
    "text": "Course objectives\n\nTo introduce partially observed Markov process (POMP) models as tools for scientific investigation and public health policy.\nTo give students the ability to formulate POMP models of their own.\nTo teach efficient approaches for performing scientific inference using POMP models.\nTo familiarize students with the pomp package.\nTo give students opportunities to work with such inference methods.\nTo provide documented examples for student re-use."
  },
  {
    "objectID": "index.html#lessons",
    "href": "index.html#lessons",
    "title": "Simulation-based Inference for Epidemiological Dynamics",
    "section": "Lessons",
    "text": "Lessons\n\nInstructions for preparing your laptop for the course exercises.\nIntroduction: What is “Simulation-based Inference for Epidemiological Dynamics”? POMPs and pomp.\nSimulation of stochastic dynamic models.\nLikelihood for POMPS: theory.\nLikelihood for POMPs: practice.\nIterated Filtering: theory.\nIterated filtering: practice.\n\nRecommended workflow in pomp.\n\nBayesian statistics and PMCMC in pomp.\nEpidemic forecasting with pomp.\nDerivative packages from pomp."
  },
  {
    "objectID": "index.html#stochastic-sirseir-simulator",
    "href": "index.html#stochastic-sirseir-simulator",
    "title": "Simulation-based Inference for Epidemiological Dynamics",
    "section": "Stochastic SIR/SEIR simulator",
    "text": "Stochastic SIR/SEIR simulator\nFor an interactive exploration of the stochastic SIR model, you can access the dedicated shiny app developed for this course. This application allows you to simulate and analyze the dynamics of disease spread using the stochastic SIR/SEIR framework."
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Simulation-based Inference for Epidemiological Dynamics",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThis website and all the materials are adapted from https://kingaa.github.io/sbied/. We would like to send our sincere gratitude to Professors Aaron A. King and Edward L. Ionides at University of Michigan for creating this wonderful course and for helping us developing our own version. We would also like to thank Zian (Larry) Zhuang from UCLA for serving as a Teaching Assistant in 2024."
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction to Simulation-based Inference for Epidemiological Dynamics",
    "section": "",
    "text": "In the first lesson, we have three goals:\n\nhelp students understand the motivations for simulation-based inference in the study of epidemiological and ecological systems;\nintroduce the class of partially observed Markov process (POMP) models; and\nintroduce the pomp R package.\n\n\n\n\n \n \n\n\n\n\nLecture materials\nzip\n\n\nReference Recording (2020,2021,2022)\nVideo (50 min)"
  },
  {
    "objectID": "likelihood.html",
    "href": "likelihood.html",
    "title": "Likelihood-based inference for POMP models",
    "section": "",
    "text": "Lecture materials 1\nzip\n\n\nLecture materials 2\nzip\n\n\nReference Recording (2020,2021)\nVideo (112 min)"
  }
]