---
title: "Extensions to the `pomp` package and framework"
author:
  - Spencer J. Fox
  - Qianying (Ruby) Lin
  - Jesse Wheeler
format: 
  beamer:
    classoption: "t"
    # fontsize: "10pt"
    link-citations: true
    keep_tex: true
    slide_level: 2
    section-titles: false
    aspectratio: 169
    include-in-header: "../_includes/header.tex"
    # beameroptions:
    #   - setbeamertemplate: "footline[frame number]"
    #   - setbeamertemplate: "navigation symbols{}"
    header-includes: |
       \setbeamertemplate{navigation symbols}{}
       \setbeamertemplate{footline}[page number]
       \newcommand\Wsat{W_{\mathrm{sat}}}
       \newcommand\muIR{\mu_{IR}}
       \newcommand\muEI{\mu_{EI}}
       \newcommand\transmission{\beta}
       \newcommand\seasAmplitude{a}
       \newcommand\rainfallExponent{r}
       \newcommand\muRS{\mu_{RS}}
       \newcommand\vaccineEfficacy{\vartheta}
       \newcommand\muBirth{\mu_S}
       \newcommand\muDeath{d}
       \newcommand\choleraDeath{d_{C}}
       \newcommand\symptomFrac{f}
       \newcommand\asymptomRelativeInfect{\epsilon}
       \newcommand\asymptomRelativeShed{\epsilon_{W}}
       \newcommand\Wbeta[1]{\beta_{W#1}}
       \newcommand\Whur[1]{\beta_{W#1}^{hm}}
       \newcommand\hHur[1]{h_{#1}^{hm}}
       \newcommand\tHur{t_{hm}}
       \newcommand\Iinit{I_{0,0}}
       \newcommand\Einit{E_{0, 0}}
       \newcommand\Wremoval{\delta_W}
       \newcommand\Wshed{\mu_W}
       \newcommand\mixExponent{\nu}
       \newcommand\sigmaProc{\sigma_{\mathrm{proc}}}
       \newcommand\reportRate{\rho}
       \newcommand\obsOverdispersion{\psi}
       \newcommand\phaseParm{\phi}
       \newcommand\transmissionTrend{\zeta}
       \newcommand\Binit{\xi}
       \newcommand\vaccClass{Z}
       \newcommand\vaccCounter{z}
       \newcommand\modelCounter{m}
       \newcommand\missing{}
       \newcommand\fixed{^\dagger}
       \newcommand\demography{\bullet}
       \newcommand\figTitle{\bf}
       \newcommand\childReduce{q}
       \newcommand\NBintercept{\alpha}
       \newcommand\NBar{\beta}
       \newcommand\NBsize{\varphi}
       \newcommand\reportChange{\delta}
       \usepackage{pict2e}
       \usepackage{algorithm2e}
    hyperrefoptions:
      - linktoc=all
  html:
    toc: false
  pdf:
    toc: false
editor_options: 
  chunk_output_type: console
bibliography: ["../sbied.bib"]
editor: 
  markdown: 
    wrap: 72
---

```{r knitr_opts,include=FALSE,cache=FALSE,purl=FALSE}
source("../_includes/setup.R", local = knitr::knit_global())
```

```{r load-packages, echo=FALSE}
library(tidyverse)
library(pomp)
library(panelPomp)
library(phylopomp)
library(ggplot2)
library(reshape2)
```

# `pomp` extensions

## Package Extensions

Mathematically, POMP models are very versatile, and many of the ideas
useful to the models described so far are also applicable in more
general settings. This gives rise to a few useful extensions of the
`pomp` package, which we try to describe here.

\vspace{6mm}

-   Meta-population data and models
    -   `panelPomp`
    -   `spatPomp`
-   Genomic / phylogenetic data
    -   `phylopomp`

Each of these packages extend the `pomp` package to other useful cases.

\vspace{6mm}

## Meta-population: Data and Models

\begin{minipage}{0.48\textwidth}
\centering
\includegraphics[width=0.95\linewidth]{ppomp.png}\\
\textbf{panelPomp: data from related, independent systems.}
\end{minipage}
\hfill
\begin{minipage}{0.48\textwidth}
\centering
\includegraphics[width=0.95\linewidth]{spatPompNetwork.png}\\
\textbf{spatPomp: data from a single interacting system.}
\end{minipage}

## Meta-population packages: Examples

Both packages require `pomp` to be installed, and the internal workings
of both packages actually use many of the `pomp` functions. Thus,
familiarity with `pomp` is a prerequisite.

-   `panelPomp`:
    -   We have *panel* or *longitudinal* data.
    -   Several independent yet related systems. Information from all
        systems is useful, not just one location.
    -   Simultaneously allows for features shared by each system as well
        as system unique features.
    -   Example: endemic COVID-19 measured in 3 locations: New York,
        London, Atlanta.
-   `spatPomp`:
    -   The name comes from the idea that we have spatially explicit
        POMP models.
    -   The data at multiple locations are thought of as
        location-specific measurements from the same system. That is,
        the dynamic systems underlying the data are connected.
    -   Example: Modeling early stages of COVID-19 in China. Here, we
        might have measurements for many cities, but at first cases were
        only found in Wuhan.

# PanelPomp

## PanelPomp: a collection of POMP models

A `panelPomp` model is really just a collection of `pomp` models. This
is also how they are built:

```{r ppompBuild, echo=TRUE, eval=FALSE}
library(panelPomp)

mod1 <- pomp(..., params = c('p1' = 0.1, 'p2' = 1.2, 'p3' = 0.9))
mod2 <- pomp(..., params = c('p1' = 0.1, 'p2' = 1.1, 'p3' = 0.6))
mod3 <- pomp(..., params = c('p1' = 0.1, 'p2' = 1.5, 'p3' = 0.75))

ppomp <- panelPomp(
  object = list(mod1, mod2, mod3),
  shared = c("p1" = 0.1), # Shared-value parameters
  specific = c("p2", "p3") # Unit-Specific parameters
)
```

## Measles Example

We can build off of the measles example by looking at UK measles from
multiple cities, and building an SEIR model for the data. There is built
in models and data in `panelPomp`

```{r}
measSIR <- panelMeasles(
  units = c("Consett", "London", "Hastings"),
  first_year = 1948,
  last_year = 1948
  )
```

## Measles Example: Figure

```{r plotMeas, eval=FALSE, echo=TRUE}
plot(measSIR)
```

```{r plotMeasEval, fig.height=3, echo=FALSE, fig.width=7}
df <- sapply(measSIR@unit_objects, function(x) x@data) |> data.frame()
df$time <- measSIR@unit_objects$Consett@times |> lubridate::date_decimal()
df_long <- tidyr::pivot_longer(
  data = df, cols = -time, names_to = 'units', values_to = 'cases'
)
ggplot(df_long, aes(x = time, y = cases)) +
  geom_line() + 
  facet_wrap(~units, nrow = 1, scales = 'free') + 
  theme_classic() + 
  scale_x_datetime(date_labels = '%b %Y') + 
  theme(axis.text.x = element_text(angle = -45, hjust = 0), axis.title.x = element_blank())
```

## panelPomp: parameters

Parameter names in `panelPomp` have the following conventions. If the
parameter is shared, it just is called by the name. If it is
unit-specific, the name of the unit follows the name of the parameter:
`<param>[<unit>]`.

```{r}
coef(measSIR)
```

## panelPomp: shared vs unit-specific

A key feature of `panelPomp` objects is which parameters are shared,
which are unit-specific. If parameters are shared, that means they have
the same value for all units. We can inspect and modify which parameters
are which using the functions `shared` and `specific`:

```{r}
shared(measSIR)
shared(measSIR) <- c(shared(measSIR), 'alpha' = 1)
shared(measSIR)
```

## panelPomp Functions

`panelPomp` is the easiest extension: If you can build one `pomp`, you
can build multiple into a single `panelPomp` object. Existing functions
and algorithms are similar as well!

```{r ppompPfilter, fig.height=3}
pfilter(measSIR, Np = 1000) |> plot(unit = 'Hastings')
```

## panelPomp: iterated filtering

We need a new algorithm for conducting maximum likelihood, either the
panel iterated filter (PIF), or marginalized panel iterated filter
(MPIF). We don't even need to change the code!

```{r ppompMif2, eval=TRUE}
mif2Out <- mif2(
  measSIR, rw.sd = rw_sd(rho = 0.02, R_0 = 0.02), 
  Nmif = 10, Np = 200, cooling.fraction.50 = 0.5, 
  block = TRUE  # block = TRUE does MPIF, usually best + faster.
  )
```

## panelPomp: likelihood {.allowframebreaks}

Because units are independent, the likelihood can be computed independently for each unit, and the total log-likelihood is the sum of unit log-likelihoods.

```{r}
unitLogLik(mif2Out)
sum(unitLogLik(mif2Out))
logLik(mif2Out)
```

\framebreak

When we do repeated particle filters, we get better estimates if we first average log-likelihood over the units, then take the sum. 

```{r calcPfilter, cache=TRUE}
library(foreach)
library(doParallel)
library(doRNG)
registerDoParallel(detectCores()-1)
foreach(rep=1:10, .combine = c) %dopar% {
  pfilter(measSIR, Np = 5000)
} -> pfOut  # Object of length 10
```

\framebreak

Like in `pomp`, we can average results using `logmeanexp`. However, because there is more than one way to do it, we have a new function `panel_logmeanexp`.
The preferred approach is averaging over the unit, then summing:

```{r logmeanexp}
panel_logmeanexp(
  sapply(pfOut, unitLogLik), MARGIN = 1, se = TRUE
)
```

We usually have larger error than in `pomp`, because there is error for each unit that adds up across the entire `panelPomp` object.

## panelPomp: sumary

- Easy extension of `pomp` that allows to fit related models to many locations. 
- Useful for (approximately) independent systems (e.g., outbreaks within various hospitals, approximately geographically isolated outbreaks of same disease, controlled randomized experiments,...)
- Very useful if limited data is available, we can pool information from all sources.
- Allows for estimating shared and unit-specific parameters. 
- To learn more, see the panelPomp research paper (to appear in the R Journal) [@panelPomp], or the package website [https://panelpomp-org.github.io/](https://panelpomp-org.github.io/)

## panelPomp: Exercise

Install the `panelPomp` package from CRAN via `install.packages("panelPomp")`. Create one of the prebuilt `panelPomp` models using a constructor function: `panelGompertz()`, `panelMeasles()`, `contacts`, or `panelRandomWalk()`. Our goal is to build some familiarity with `panelPomp` models.

\vspace{4mm}

Check the documentation to learn more about the model (e.g., `?panelGompertz`). How many units does it have by default? How many observations and parameters? Which parameters are shared and which unit specific? Can you change the parameter type? What happens if you `plot` the object?

\vspace{4mm}

Once you feel like you understand the object, try running a particle filter and iterated filter (PIF or MPIF, implemented via `mif2`).

# SpatPOMP

## spatPomp: Introduction

`spatPomp` is another extension that can be used to fit meta-population models.
The difference between `spatPomp` and `panelPomp` is that `spatPomp` allows for dependence between units.

- Both mathematically and computationally, this is a much more difficult task.
- It can lead to very interesting and high-dimensional models.

Note that any `panelPomp` model can be expressed as a `spatPomp`, so you can use `spatPomp` methods to fit `panelPomp` models.
However, if a `panelPomp` is appropriate, it is both theoretically and computationally more efficient to treat the model as a `panelPomp`. 

## High-dimensional models 

`spatPomp` is relatively new, the software paper was published last year [@spatPomp]. It enables fitting higher-dimensional POMP models than has been possible in the past. 

\begin{figure}
\centering
\includegraphics[width=0.4\textwidth]{spatPomp.png}
\caption{Limits of POMP modeling. Credit: Asfaw et al. 2024.}
\end{figure}

## Dependent States

Unlike `panelPomp`, the latent process $X(t)$ is assumed to be linked for each unit (e.g., infectious individuals from city 1 can infect susceptible individuals in city 2).

\begin{figure}
\centering
\includegraphics[width=0.8\textwidth]{spatPompX.png}
\caption{Credit: Asfaw et al. 2024.}
\end{figure}

## Implications

- Allowing for spatially dependent latent processes can lead to more interesting, more realistic models.
- However, they become more complicated to build in practice, because we have to carefully describe how the systems interact. 
- Mathematically, these models are also more complex. Until very recently, plug-and-play methods for fitting and evaluating these models did not exist.

## spatPomp: methods

Parts of a `spatPomp` that can be implemented

\begin{figure}
\centering
\includegraphics[width=0.85\textwidth]{spatPompFuns.png}
\end{figure}

## Block particle filter (`bpfilter`)

To perform inference, it is similar to `pomp`, but we will use an algorithm called the Block-Particle Filter (BPF). Particle filters don't work well in high-dimensions (even as low as 3 dimensions is "high"). The BPF is similar to the particle filter, but does the following:

- Simulate the entire process forward with `rprocess`.
- Use `dunit_meas` to calculate weights independently for all units, and update particles independently. 

**Pro:** This algorithm is surprisingly fast and effective. Best if coupling between units is weak. 

**Con:** Does not satisfy conservation of mass properties. Alternative options can be found in the `spatPomp` tutorial [@spatPompTutorial]. 

## Iterated block particle filter (IBPF)

Like iterating filtering is a special type of particle filter, with model parameters doing a random walk, we can iterate the BPF to get an IBPF to fit model parameters [@IBPF24].

Like the BPF, the IBPF is surprisingly effective at maximizing the likelihood [@spatPompTutorial], but does not conserve mass.

## Example: Cholera in Haiti

 \begin{tabular}{cl}  
         \begin{tabular}{c}
           \includegraphics[height=4.3cm, width=5.5cm]{vaccination.jpeg}
           \end{tabular}
           & \begin{tabular}{l}
             \parbox{0.5\linewidth}{%  change the parbox width as appropiate
             \begin{itemize}
              \item Haiti experienced a cholera outbreak following the devastating 2010 earthquake. 
              \item From 2010-2019, more than \alert{800,000} recorded cases, making it one of the largest recorded outbreaks.
              \item Oral cholera vaccination (OCV) is available, but in limited supply.
              \item A modeling goal is to study the potential impact of various vaccination strategies.
              \item Image credit: UNICEF.
             \end{itemize}
    }
         \end{tabular}  \\
\end{tabular}

This example is from [@Wheeler24]

## Haiti Data

```{r haitiDepartments, fig.height=3.5, echo=FALSE}
library(haitipkg)
library(tidyverse)

dep_plot_df <- haitiCholera %>%
  select(-report) %>%
  pivot_longer(
    data = .,
    cols = -date_saturday,
    values_to = 'cases',
    names_to = 'dep'
  ) %>%
  mutate(
    date = as.Date(date_saturday),
    dep = gsub("\\.", "_", dep)
  ) %>%
  mutate(
    dep = case_when(dep == "Grand_Anse" ~ "Grande_Anse", TRUE ~ dep)
  )

dep_labeller <- as_labeller(
  c(
    'Artibonite' = 'Artibonite',
    'Sud_Est' = 'Sud-Est',
    'Sud.Est' = 'Sud-Est',
    'Nippes' = 'Nippes',
    'Nord_Est' = 'Nord-Est',
    'Nord.Est' = 'Nord-Est',
    'Ouest' = 'Ouest',
    'Centre' = 'Centre',
    'Nord' = 'Nord',
    'Sud' = 'Sud',
    'Nord_Ouest' = 'Nord-Ouest',
    'Nord.Ouest' = 'Nord-Ouest',
    'Grande_Anse' = 'Grand\'Anse',
    'Grand.Anse' = 'Grand\'Anse'
  )
)

# Vector used to arrange figures in the same order that was used in Lee et al (2020)
plot_order <- c(
  'Artibonite',
  'Sud_Est',
  'Nippes',
  'Nord_Est',
  'Ouest',
  'Centre',
  'Nord',
  'Sud',
  'Nord_Ouest',
  'Grande_Anse'
)

# Plot reported cholera cases, by department. Creates Figure 1.
ggplot(dep_plot_df, aes(x = date, y = cases + 1)) +
  facet_wrap(~dep, nrow = 2, labeller = dep_labeller) +
  geom_line() +
  theme(axis.title.x = element_blank()) +
  ylab('Reported Cases') +
  scale_y_log10(
    labels = scales::trans_format("log10", scales::math_format(10^.x))
  ) +
  scale_x_date(
    date_labels = "'%y",
    breaks = seq.Date(
      from = as.Date("2011-01-01"),
      to = as.Date("2019-01-01"),
      by = '2 years'
    )
  ) + 
  theme_bw() + 
  theme(axis.title.x = element_blank())
```

## Cholera Model 

 \begin{tabular}{ll}  
         \begin{tabular}{l}
          %%%%% SEAIR diagram
  \resizebox{0.55\textwidth}{!}{
    \Large
    \setlength{\unitlength}{5pt}
    \begin{picture}(100,70)(1,15)

    % COMPARTMENTS
    \put(39, 50){\circle{6}}
    \put(37, 49){$\mathrm{W}_{u}$}

    \put(8, 55){\framebox(6, 6){$\mathrm{S_{u0}}$}}
    \put(8, 39){\framebox(6, 6){$\mathrm{S_{u\vaccCounter}}$}}
    \put(36, 62.5){\framebox(6, 6){$\mathrm{A_{u}}$}}
    \put(36, 31.5){\framebox(6, 6){$\mathrm{I_{u}}$}}
    \put(56, 55){\framebox(6, 6){$\mathrm{R^1_{u0}}$}}
    \put(71, 55){\framebox(6, 6){$\mathrm{R^2_{u0}}$}}
    \put(86, 55){\framebox(6, 6){$\mathrm{R^3_{u0}}$}}
    \put(56, 39){\framebox(6, 6){$\mathrm{R^1_{u\vaccCounter}}$}}
    \put(71, 39){\framebox(6, 6){$\mathrm{R^2_{u\vaccCounter}}$}}
    \put(86, 39){\framebox(6, 6){$\mathrm{R^3_{u\vaccCounter}}$}}

    % INDIVIDUAL MOVEMENT
    % S_u0 -> A_u
    \put(15, 58.5){\vector(3, 1.2){20}}

    % S_u0 -> I_u
    \put(15, 57.5){\vector(1, -1.1){20}}

    % S_uz -> I_u
    \put(15, 41.5){\vector(3, -1.2){20}}

    % S_uz -> A_u
    \put(15, 42.5){\vector(1, 1.1){20}}

    % I_u -> R_u0
    \put(43, 66){\vector(2, -1){12}}

    % A_u -> R_uz
    \multiput(43, 64)(1.25, -1.6){12}{\line(1, -1.3){0.7}}
    \put(57, 46){\vector(1, -1.3){0.2}}

    \put(43, 36){\vector(1.7, 2){15}}

    \multiput(60, 54)(0, -2){4}{\line(0, -1){1}}
    \put(60, 46){\vector(0, -1){0.5}}

    \multiput(74, 54)(0, -2){4}{\line(0, -1){1}}
    \put(74, 46){\vector(0, -1){0.5}}

    \multiput(89, 54)(0, -2){4}{\line(0, -1){1}}
    \put(89, 46){\vector(0, -1){0.5}}

    \put(63, 58){\vector(1, 0){7}}
    \put(78, 58){\vector(1, 0){7}}

    \put(63, 42){\vector(1, 0){7}}
    \put(78, 42){\vector(1, 0){7}}

    \multiput(39, 61.5)(0, -1){8}{\line(0, -1){0.3}}
    \put(39,54){\vector(0, -1){0.5}}

    \multiput(39, 38.5)(0, 1){8}{\line(0, 1){0.3}}
    \put(39,46){\vector(0, 1){0.5}}

    \cbezier(89,62)(80, 85)(20, 85)(12,62)
    \put(12.2,62.5){\vector(-1, -3.5){0.3}}

    \cbezier(89,38)(80, 15)(20, 15)(12,38)
    \put(12.2,37.5){\vector(-1, 3.5){0.3}}

    \multiput(11, 54)(0, -2){4}{\line(0, -1){1}}
    \put(11, 46){\vector(0, -1){0.5}}

    % DEMOGRAPHY
    % -> S
    \put(0, 58){\vector(1, 0){7}}
    \put(1, 59){$\mathrm{\mu_{\demography S_{u0}}}$}

    % S Death
    \put(10, 62){\vector(0, 1){7}}
    \put(8, 64){$\mathrm{\muDeath}$}
    \put(10, 38){\vector(0, -1){7}}
    \put(8, 34){$\mathrm{\muDeath}$}

    % A + I death
    \put(39, 69.5){\vector(0, 1){7}}
    \put(37, 71.5){$\mathrm{\muDeath}$}

    \put(39, 31.5){\vector(0, -1){7}}
    \put(30, 27.5){$\mathrm{\muDeath + \choleraDeath}$}

    % R Death
    \put(59, 62){\vector(0, 1){7}}
    \put(57, 64){$\mathrm{\muDeath}$}

    \put(74, 62){\vector(0, 1){7}}
    \put(72, 64){$\mathrm{\muDeath}$}

    \put(59, 38){\vector(0, -1){7}}
    \put(57, 34){$\mathrm{\muDeath}$}

    \put(74, 38){\vector(0, -1){7}}
    \put(72, 34){$\mathrm{\muDeath}$}

    \put(93, 42){\vector(1, 0){7}}
    \put(95.5, 43){$\mathrm{\muDeath}$}

    \put(93, 58){\vector(1, 0){7}}
    \put(95.5, 59){$\mathrm{\muDeath}$}

    % W death
    \multiput(43, 50)(1, 0){7}{\line(1, 0){0.2}}
    \put(50.2, 50){\vector(1, 0){0.5}}
    \put(44, 51){$\mathrm{\Wremoval}$}

    \end{picture}
  }  
         \end{tabular}
           & \begin{tabular}{l}
             \parbox{0.4\linewidth}{%  change the parbox width as appropiate
             \begin{itemize}
              \item SIAR3W Model 
              \item Spatial Dependence between units.
              \item Stochastic transmission rates.
              \item Overdispersed Markov counting system.
              \item Rainfall driven transmission.
              \item Environmental reservoir of bacteria.
              \item Adjustments for Hurricane Mathew (Oct 2016).
              \item For details on implementation, see (Wheeler et al. 2024).
             \end{itemize}
    }
         \end{tabular}  \\
\end{tabular}


## Pre-built model in the `haitipkg` R package

Rather than build this from scratch, we can use a constructor function from `haitipkg`.

```{r}
devtools::install_github('jeswheel/haitipkg')
sp_mod <- haitipkg::haiti3_spatPomp()
```

Performing inference for this model is similar to the `pomp` Measles example, but it takes much longer to compute in practice

```{r showBPF, eval=FALSE}
bpf_out <- bpfilter(sp_mod, Np = 1000, block_size = 1)
```

```{r evalBPF, cache = TRUE, echo=FALSE}
tic <- Sys.time()
<<showBPF>>
toc <- Sys.time()
bpf_time <- toc - tic
```

This took `r round(as.numeric(bpf_time), 2)` seconds to run. 

## Parameter Estimation

The functionality for estimating parameters using IBPF is similar to using `mif2` in pomp: 

```{r IBPFexample, eval=FALSE}
## NOT RUN
ibpf(
  h3_spat,
  Nbpf = 100,  # Equivalent to Nmif
  Np = 2000,
  sharedParNames = <character vector of shared parameter names>,
  unitParNames = <character vector of unit-specific parameter names>,
  spat_regression = 0.1,
  rw.sd = ...,
  cooling.fraction.50 = ...,
  block_size = 1
)
```

## Confidence Intervals 

For `spatPomp`, we can compute confidence intervals in a similar way as `pomp`. That is, we can fix the parameter of interest at a range of values, and maximize the likelihood for the remaining parameters.

\begin{figure}
\centering
\includegraphics[width=0.4\textwidth]{spatPompCI.png}
\caption{\label{fig:CI}Confidence interval for one of the model parameters. Credit: Wheeler et al. 2024.}
\end{figure}

## spatPomp: Summary 

- The `spatPomp` package is an extension of `pomp` that enables building and fitting interacting dynamic meta-population models. 
- Algorithms and software are a little bit different than `pomp`, but similar enough that you `pomp` skills are applicable. 
- The nature of these models mean that things run much slower, for two reasons: 
   - If you have data from $U$ units, then the code is roughly $U$ times slower for the same number of iterations and particles. 
   - Because there are $U$ times as many parameters, the likelihood surface is usually more complex, and we may need more iterations and particles than for low-dimensional systems.
- To learn more, see the package tutorial [@spatPompTutorial] or the Haiti Cholera example we discussed [@Wheeler24].

# Phylopomp

## Phylodynamic package: phylopomp

The spreading of infectious diseases can be considered as the mutation
accumulation in genomic sequences in hosts and the transmission of such
virus from host to host. Therefore, when the viral genomic samples are
collected from hosts, one can traceback a partially observed ancestral
history and reconstruct it as a tree, called genealogy or phylogeny.

\vspace{6mm}

With `phylopomp`, we can simulate these partially observed ancestral
history from a board class of epidemiological models, and infer the
transmission dynamics given a genealogy/phylogeny based on `pomp`.

\vspace{6mm}
The mathematical theories and algorithm are discussed in @King2025.

## phylopomp: genomic sequences & phylogenetic tree

\begin{center}
  \includegraphics[width=\linewidth]{../graphics/nextstrain_geneal.png}
\end{center}

## phylopomp: phylogenetics & phylodynamics

\begin{center}
  \includegraphics[width=\linewidth]{../graphics/phylogen_phylodyn.pdf}
\end{center}

The goal of `phylopomp` is to infer the partially observed
epidemiological dynamics, formulated by compartmental models, using the
genealogy/phylogeny, reconstructed from sampled genomic sequences.

## phylopomp: genealogy and events

\begin{center}
  \includegraphics[width=.7\linewidth]{../graphics/MGP_events.pdf}
\end{center}


## phylopomp: installation

The github repo for `phylopomp` is on
\url{https://github.com/kingaa/phylopomp/}.

We can install the latest released version from github using `devtools`.

```{r install, eval=FALSE}
library(devtools)
install_github("kingaa/phylopomp@0.14.8.0")
```

To confirm the package is installed successfully,

```{r install-check}
packageVersion("phylopomp")
library(phylopomp)
```

## phylopomp: simulation and inference

-   The first useful function of `phylopomp` is to build customized
    models and simulate genealogies from it. Pre-defined models are
    included: linear birth-death model (`lbdp`), moran model, SIR, SEIR,
    two-class SIR model with super-infection (`si2r`), two-strain SIR
    model (`siir`), etc.
-   The second is to infer the models given genealogies using `pomp`.
    This function is currently under development, while a few models are
    available: `lbdp`, `moran`, `sir`, and `seir`.

## Example: simulation with pre-defined models in phylopomp {.allowframebreaks}

::::: columns
::: {.column width="40%"}
```{r sim-sir-1, eval=FALSE, purl=FALSE}
set.seed(1234)
simulate(
  "SIR",time=2,
  Beta=2,gamma=1,psi=2,
  S0=1000,I0=5
)|>
  # update params
  simulate(
    time=5,
    Beta=5,gamma=2,psi=3
  ) -> model.sir
plot(model.sir)
```
:::

::: {.column width="60%"}
<!-- \vspace{-10mm} -->

```{r sim-sir-2, fig.width=6, fig.height=4, dpi=300, echo=FALSE}
#| out-height: 70%
#| fig-cap: "Simulated genealogy from an SIR model."
library(phylopomp)
set.seed(1234)
phylopomp::simulate(
  "SIR",time=2,
  Beta=2,gamma=1,psi=2,
  S0=1000,I0=5
)|>
  phylopomp::simulate(
    Beta=5,gamma=2,time=5,psi=3
  ) -> model.sir # update params
plot(model.sir)
```
:::
:::::

\framebreak

::::: columns
::: {.column width="40%"}
```{r sim-seir1-1, eval=FALSE, purl=FALSE}
set.seed(1234)
simulate(
  "SEIR",time=2,
  Beta=2,sigma=2,
  gamma=1,psi=2,
  S0=1000,E0=0,I0=5
) |>
  simulate(
    time=5,
    Beta=5,gamma=2,
    psi=3
  ) -> model.seir
plot(model.seir)
```
:::

::: {.column width="60%"}
<!-- \vspace{-10mm} -->

```{r sim-seir1-2, fig.width=6, fig.height=4, dpi=300, echo=FALSE}
#| out-height: 70%
#| fig-cap: "Simulated genealogy from an SEIR model."
set.seed(1234)
phylopomp::simulate(
  "SEIR",time=2,
  Beta=2,sigma=2,
  gamma=1,psi=2,
  S0=1000,E0=0,I0=5
) |>
  phylopomp::simulate(
    time=5,
    Beta=5,gamma=2,
    psi=3
  ) -> model.seir
plot(model.seir)
```
:::
:::::

\framebreak

::::: columns
::: {.column width="30%"}
```{r sim-seir2-1, eval=FALSE, purl=FALSE}
# show E/I transitions
model.seir |>
  plot(obscure=FALSE)
```

\vspace{6mm}

The compartments E and I are colored in blue and brown.

:::

::: {.column width="70%"}
<!-- \vspace{-10mm} -->

```{r sim-seir2-2, fig.width=6, fig.height=4, dpi=300,echo=FALSE}
#| out-height: 70%
#| fig-cap: "Simulated genealogy with colors."
plot(model.seir, obscure=FALSE)       # show E and I transitions
```
:::
:::::

\framebreak

::::: columns
::: {.column width="30%"}
```{r sim-seir3-1, eval=FALSE, purl=FALSE}
model.seir |>
  lineages( 
    obscure=FALSE
  ) |> 
  plot()
```
:::

::: {.column width="70%"}
<!-- \vspace{-10mm} -->

```{r sim-seir3-2, fig.width=6, fig.height=4, dpi=300, echo=FALSE}
#| out-height: 80%
#| fig-cap: "Lineages Through Time (LTT)."
model.seir |>
  lineages( 
    obscure=FALSE
  ) |> 
  plot()
```
:::
:::::

## Example: inference with pre-defined models in phylopomp {.allowframebreaks}

```{r infer-sir-1, eval=FALSE, purl=FALSE}
library(pomp)
library(phylopomp)
set.seed(1234)
# simulate a geneal object from an SIR model
simulate("SIR",time=10,
  Beta=3,gamma=1,psi=2,omega=1,S0=100,I0=5) -> x
x |>        # build a pomp object
  sir_pomp(
    Beta=3,gamma=1,psi=2,omega=1,
    S0=100,I0=5,R0=0
  ) -> po
po |> pfilter(Np=5000) -> pf
pf |> logLik()
```

```{r infer-sir-2, echo=FALSE}
library(pomp)
library(phylopomp)
set.seed(1234)
# simulate a geneal object from an SIR model
phylopomp::simulate("SIR",time=10,
  Beta=3,gamma=1,psi=2,omega=1,S0=100,I0=5) -> x
x |>        # build a pomp object
  sir_pomp(
    Beta=3,gamma=1,psi=2,omega=1,
    S0=100,I0=5,R0=0
  ) -> po
po |> pfilter(Np=5000) -> pf
pf |> logLik()
```

\framebreak

```{r infer-seir-1, eval=FALSE, purl=FALSE}
set.seed(1234)
simulate("SEIRS",      # simulate a genealogy from an SEIR model
  Beta=4,sigma=1,gamma=1,psi=1,omega=1,
  S0=100,E0=3,I0=5,R0=100, time=5
) -> G
G |>
  seirs_pomp(
    Beta=4,sigma=1,gamma=1,psi=1,omega=1,
    S0=100,E0=3,I0=5,R0=100
  ) |> pfilter(Np=1000) |> 
  replicate(n=20) |> concat() -> pf
pf |> logLik() |> logmeanexp(se=TRUE)
```

```{r infer-seir-2, echo=FALSE}
set.seed(1234)
phylopomp::simulate("SEIRS",      # simulate a genealogy from an SEIR model
  Beta=4,sigma=1,gamma=1,psi=1,omega=1,
  S0=100,E0=3,I0=5,R0=100, time=5
) -> G
G |>
  seirs_pomp(
    Beta=4,sigma=1,gamma=1,psi=1,omega=1,
    S0=100,E0=3,I0=5,R0=100
  ) |> pfilter(Np=1000) |> 
  replicate(n=20) |> concat() -> pf
pf |> logLik() |> logmeanexp(se=TRUE)
```

## Exercise 1: simulate a genealogy from other pre-defined models {.allowframebreaks}

Run the following code to simulate genealogies from two other pre-defined models and to infer the dynamics from a tree simulated from an SEIR model.
Please also see the exercise script `scripts/exercise_phylopomp.r`.

```{r phylopomp-exercise-1-1, eval=FALSE}
library(phylopomp)
# simulate from a two-strain SIR model
??siir              # check the model setting

simulate(
  "SIIR",Beta1=2,Beta2=50,gamma=1,psi1=2,psi2=1,
  S0=300,I1_0=20,I2_0=2,time=5
) -> model.siir

model.siir |> plot(obscure=FALSE)
model.siir |> lineages(obscure=FALSE) |> plot()
```

\framebreak

```{r phylopomp-exercise-1-2, eval=FALSE}
# simulate from a two-class SIR model with super-spreader
??si2r              # check the model setting

simulate(
  "SI2R", Beta=5,mu=2,gamma=1,psi1=1,psi2=2,sigma12=1,sigma21=3,
  S0=500,I0=10,time=5
) -> model.si2r

model.si2r |> plot(obscure=FALSE)
model.si2r |> lineages(obscure=FALSE) |> plot()
```

## Exercise 2: fit a model to a tree simulated from a different model {.allowframebreaks}

```{r phylopomp-exercise-2-1, eval=FALSE}
library(pomp)
simulate("SEIRS",
  Beta=4,sigma=1,gamma=1,psi=1,omega=1,
  S0=100,E0=3,I0=5,R0=100, time=5
) -> G.seir
plot(G.seir)

G.seir |>
  sir_pomp(
    Beta=4,,gamma=1,psi=1,
    S0=100,I0=5,R0=100
  ) |> pfilter(Np=1000) |> 
  replicate(n=20) |> concat() -> pf
pf |> logLik() |> logmeanexp(se=TRUE)
```

\framebreak

```{r phylopomp-exercise-2-2, eval=FALSE}
simulate(
  "SIR",time=10,
  Beta=3,gamma=1,psi=2,omega=1,S0=100,I0=5
) -> G.sir
plot(G.sir)

G.sir |>
  seirs_pomp(
    Beta=3,sigma=1,gamma=1,psi=2,omega=1,
    S0=100,E0=0,I0=5,R0=0
  ) |> pfilter(Np=1000) |> 
  replicate(n=20) |> 
  concat() -> pf

pf |> logLik() |> logmeanexp(se=TRUE)
```

# References

## References {.allowframebreaks}

::: {#refs}
:::

## License, acknowledgments, and links

-   This lesson is prepared for the [Simulation-based Inference for
    Epidemiological Dynamics](https://rubbislam.quarto.pub/episim/)
    module at the Summer Institute in Statistics and Modeling in
    Infectious Diseases,
    [SISMID](https://sph.emory.edu/SISMID/index.html).

-   The materials build on [previous versions of this course and related
    courses](../acknowledge.html).

-   Licensed under the [Creative Commons Attribution-NonCommercial
    license](https://creativecommons.org/licenses/by-nc/4.0/). Please
    share and remix non-commercially, mentioning its origin.
    \includegraphics[height=12pt]{../graphics/cc-by-nc}

-   Produced with R version `r getRversion()` and pomp version
    `r packageVersion("pomp")`.

-   Compiled on 2025-07-23.

\vfill

[Back to Lesson](index.html)

[`R` code for this lesson](./main.R)
