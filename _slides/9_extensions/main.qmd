---
title: "Extensions to the `pomp` package and framework"
author:
  - Spencer J. Fox
  - Qianying (Ruby) Lin
  - Jesse Wheeler
format: 
  beamer:
    classoption: "t"
    # fontsize: "10pt"
    link-citations: true
    keep_tex: true
    slide_level: 2
    section-titles: false
    aspectratio: 169
    include-in-header: "../_includes/header.tex"
    # beameroptions:
    #   - setbeamertemplate: "footline[frame number]"
    #   - setbeamertemplate: "navigation symbols{}"
    header-includes: |
       \setbeamertemplate{navigation symbols}{}
       \setbeamertemplate{footline}[page number]
    hyperrefoptions:
      - linktoc=all
  html:
    toc: false
  pdf:
    toc: false
editor_options: 
  chunk_output_type: console
bibliography: ["../sbied.bib"]
editor: 
  markdown: 
    wrap: 72
---

```{r knitr_opts,include=FALSE,cache=FALSE,purl=FALSE}
source("../_includes/setup.R", local = knitr::knit_global())
```

```{r load-packages, echo=FALSE}
library(tidyverse)
library(pomp)
library(panelPomp)
library(ggplot2)
library(reshape2)
```

# `pomp` extensions

## Package Extensions

Mathematically, POMP models are very versatile, and many of the ideas
useful to the models described so far are also applicable in more
general settings. This gives rise to a few useful extensions of the
`pomp` package, which we try to describe here.

\vspace{6mm}

-   Meta-population data and models
    -   `panelPomp`
    -   `spatPomp`
-   Genomic / phylogenetic data
    -   `phylopomp`

Each of these packages extend the `pomp` package to other useful cases.

\vspace{6mm}

## Meta-population: Data and Models

\begin{minipage}{0.48\textwidth}
\centering
\includegraphics[width=0.95\linewidth]{ppomp.png}\\
\textbf{panelPomp: data from related, independent systems.}
\end{minipage}
\hfill
\begin{minipage}{0.48\textwidth}
\centering
\includegraphics[width=0.95\linewidth]{spatPomp.png}\\
\textbf{spatPomp: data from a single interacting system.}
\end{minipage}

## Meta-population packages: Examples

Both packages require `pomp` to be installed, and the internal workings
of both packages actually use many of the `pomp` functions. Thus,
familiarity with `pomp` is a prerequisite.

-   `panelPomp`:
    -   We have *panel* or *longitudinal* data.
    -   Several independent yet related systems. Information from all
        systems is useful, not just one location.
    -   Simultaneously allows for features shared by each system as well
        as system unique features.
    -   Example: endemic COVID-19 measured in 3 locations: New York,
        London, Atlanta.
-   `spatPomp`:
    -   The name comes from the idea that we have spatially explicit
        POMP models.
    -   The data at multiple locations are thought of as
        location-specific measurements from the same system. That is,
        the dynamic systems underlying the data are connected.
    -   Example: Modeling early stages of COVID-19 in China. Here, we
        might have measurements for many cities, but at first cases were
        only found in Wuhan.

# PanelPomp

## PanelPomp: a collection of POMP models

A `panelPomp` model is really just a collection of `pomp` models. This
is also how they are built:

```{r ppompBuild, echo=TRUE, eval=FALSE}
library(panelPomp)

mod1 <- pomp(..., params = c('p1' = 0.1, 'p2' = 1.2, 'p3' = 0.9))
mod2 <- pomp(..., params = c('p1' = 0.1, 'p2' = 1.1, 'p3' = 0.6))
mod3 <- pomp(..., params = c('p1' = 0.1, 'p2' = 1.5, 'p3' = 0.75))

ppomp <- panelPomp(
  object = list(mod1, mod2, mod3),
  shared = c("p1" = 0.1), # Shared-value parameters
  specific = c("p2", "p3") # Unit-Specific parameters
)
```

## Measles Example

We can build off of the measles example by looking at UK measles from
multiple cities, and building an SEIR model for the data. There is built
in models and data in `panelPomp`

```{r}
measSIR <- panelMeasles(
  units = c("Consett", "London", "Hastings"),
  first_year = 1948,
  last_year = 1948
  )
```

## Measles Example: Figure

```{r plotMeas, eval=FALSE, echo=TRUE}
plot(measSIR)
```

```{r plotMeasEval, fig.height=3, echo=FALSE, fig.width=7}
df <- sapply(measSIR@unit_objects, function(x) x@data) |> data.frame()
df$time <- measSIR@unit_objects$Consett@times |> lubridate::date_decimal()
df_long <- tidyr::pivot_longer(
  data = df, cols = -time, names_to = 'units', values_to = 'cases'
)
ggplot(df_long, aes(x = time, y = cases)) +
  geom_line() + 
  facet_wrap(~units, nrow = 1, scales = 'free') + 
  theme_classic() + 
  scale_x_datetime(date_labels = '%b %Y') + 
  theme(axis.text.x = element_text(angle = -45, hjust = 0), axis.title.x = element_blank())
```

## panelPomp: parameters

Parameter names in `panelPomp` have the following conventions. If the
parameter is shared, it just is called by the name. If it is
unit-specific, the name of the unit follows the name of the parameter:
`<param>[<unit>]`.

```{r}
coef(measSIR)
```

## panelPomp: shared vs unit-specific

A key feature of `panelPomp` objects is which parameters are shared,
which are unit-specific. If parameters are shared, that means they have
the same value for all units. We can inspect and modify which parameters
are which using the functions `shared` and `specific`:

```{r}
shared(measSIR)
shared(measSIR) <- c(shared(measSIR), 'alpha' = 1)
shared(measSIR)
```

## panelPomp Functions

`panelPomp` is the easiest extension: If you can build one `pomp`, you
can build multiple into a single `panelPomp` object. Existing functions
and algorithms are similar as well!

```{r ppompPfilter, fig.height=3}
pfilter(measSIR, Np = 1000) |> plot(unit = 'Hastings')
```

## panelPomp: iterated filtering

We need a new algorithm for conducting maximum likelihood, either the
panel iterated filter (PIF), or marginalized panel iterated filter
(MPIF). We don't even need to change the code!

```{r ppompMif2, eval=FALSE}
mif2Out <- mif2(
  measSIR, rw.sd = rw_sd(rho = 0.02, R_0 = 0.02), 
  Nmif = 10, Np = 200, cooling.fraction.50 = 0.5, 
  block = TRUE  # block = TRUE does MPIF, usually best + faster.
  )
```

# Phylopomp

## Phylodynamic package: phylopomp

The spreading of infectious diseases can be considered as
the mutation accumulation in genomic sequences in hosts and 
the transmission of such virus from host to host.
Therefore, when the viral genomic samples are collected from hosts,
one can traceback a partially observed ancestral history and
reconstruct it as a tree, called genealogy or phylogeny.

\vspace{6mm}

With `phylopomp`, we can simulate these partially observed ancestral history
from a board class of epidemiological models, 
and infer the transmission dynamics given a genealogy/phylogeny based on `pomp`.

## phylopomp: genomic sequences & phylogenetic tree

\begin{center}
  \includegraphics[width=\linewidth]{../graphics/nextstrain_geneal.png}
\end{center}

## phylopomp: phylogenetics & phylodynamics

\begin{center}
  \includegraphics[width=\linewidth]{../graphics/phylogen_phylodyn.pdf}
\end{center}

The goal of `phylopomp` is to infer the partially observed
epidemiological dynamics, formulated by compartmental models, using the
genealogy/phylogeny, reconstructed from sampled genomic sequences.

## phylopomp: installation

The github repo for `phylopomp` is on
\url{https://github.com/kingaa/phylopomp/}.

We can install the latest released version from github using `devtools`.

```{r install, eval=FALSE}
library(devtools)
install_github("kingaa/phylopomp@0.14.8.0")
```

To confirm the package is installed successfully,

```{r install-check}
packageVersion("phylopomp")
library(phylopomp)
```

## phylopomp: simulation and inference

-   The first useful function of `phylopomp` is to build customized
    models and simulate genealogies from it. Pre-defined models are
    included: linear birth-death model (`lbdp`), moran model, SIR, SEIR,
    two-class SIR model with super-infection (`si2r`), two-strain SIR
    model (`siir`), etc.
-   The second is to infer the models given genealogies using `pomp`.
    This function is currently under development, while a few models are
    available: `lbdp`, `moran`, `sir`, and `seir`.

## Example: simulation with pre-defined models in phylopomp {.allowframebreaks}

::::: columns
::: {.column width="40%"}
```{r sim-sir-1, eval=FALSE, purl=FALSE}
set.seed(1234)
simulate(
  "SIR",time=2,
  Beta=2,gamma=1,psi=2,
  S0=1000,I0=5
)|>
  # update params
  simulate(
    time=5,
    Beta=5,gamma=2,psi=3
  ) -> model.sir
plot(model.sir)
```
:::

::: {.column width="60%"}
<!-- \vspace{-10mm} -->

```{r sim-sir-2, fig.width=6, fig.height=4, dpi=300, echo=FALSE}
#| out-height: 70%
#| fig-cap: "Simulated genealogy from an SIR model."
set.seed(1234)
simulate(
  "SIR",time=2,
  Beta=2,gamma=1,psi=2,
  S0=1000,I0=5
)|>
  simulate(
    Beta=5,gamma=2,time=5,psi=3
  ) -> model.sir # update params
plot(model.sir)
```
:::
:::::

\framebreak

::::: columns
::: {.column width="40%"}
```{r sim-seir1-1, eval=FALSE, purl=FALSE}
set.seed(1234)
simulate(
  "SEIR",time=2,
  Beta=2,sigma=2,
  gamma=1,psi=2,
  S0=1000,I0=5
) |>
  simulate(
    time=5,
    Beta=5,gamma=2,
    psi=3
  ) -> model.seir
plot(model.seir)
```
:::

::: {.column width="60%"}
<!-- \vspace{-10mm} -->

```{r sim-seir1-2, fig.width=6, fig.height=4, dpi=300, echo=FALSE}
#| out-height: 70%
#| fig-cap: "Simulated genealogy from an SEIR model."
set.seed(1234)
simulate("SEIR",Beta=2,sigma=2,gamma=1,psi=2,S0=1000,I0=5,time=2) |>
  simulate(Beta=5,gamma=2,time=5,psi=3) -> model.seir
plot(model.seir)
```
:::
:::::


\framebreak

::::: columns
::: {.column width="30%"}
```{r sim-seir2-1, eval=FALSE, purl=FALSE}
# show E/I transitions
model.seir |>
  plot(obscure=FALSE)
```
:::

::: {.column width="70%"}
<!-- \vspace{-10mm} -->

```{r sim-seir2-2, fig.width=6, fig.height=4, dpi=300,echo=FALSE}
#| out-height: 70%
#| fig-cap: "Simulated genealogy with colors."
plot(model.seir, obscure=FALSE)       # show E and I transitions
```
:::
:::::

\framebreak

::::: columns
::: {.column width="30%"}
```{r sim-seir3-1, eval=FALSE, purl=FALSE}
model.seir |>
  lineages( 
    obscure=FALSE
  ) |> 
  plot()
```
:::

::: {.column width="70%"}
<!-- \vspace{-10mm} -->

```{r sim-seir3-2, fig.width=6, fig.height=4, dpi=300, echo=FALSE}
#| out-height: 80%
#| fig-cap: "Lineages Through Time (LTT)."
model.seir |>
  lineages( 
    obscure=FALSE
  ) |> 
  plot()
```
:::
:::::

## Example: inference with pre-defined models in phylopomp {.allowframebreaks}

```{r infer-sir}
library(pomp)
set.seed(1234)
# simulate a geneal object from an SIR model
simulate("SIR",time=10,Beta=3,gamma=1,psi=2,omega=1,S0=100,I0=5) -> x
# build a pomp object
x |>
  sir_pomp(
    Beta=3,gamma=1,psi=2,omega=1,
    S0=100,I0=5,R0=0
  ) -> po
po |> pfilter(Np=5000) -> pf

pf |> logLik()
```

\framebreak

```{r infer-seir}
set.seed(1234)
simulate("SEIRS",      # simulate a genealogy from an SEIR model
  Beta=4,sigma=1,gamma=1,psi=1,omega=1,
  S0=100,E0=3,I0=5,R0=100, time=5
) -> G
G |>
  seirs_pomp(
    Beta=4,sigma=1,gamma=1,psi=1,omega=1,
    S0=100,E0=3,I0=5,R0=100
  ) |> pfilter(Np=1000) |> 
  replicate(n=20) |> concat() -> pf
pf |> logLik() |> logmeanexp(se=TRUE)
```

## License, acknowledgments, and links

-   This lesson is prepared for the [Simulation-based Inference for
    Epidemiological Dynamics](https://rubbislam.quarto.pub/episim/)
    module at the Summer Institute in Statistics and Modeling in
    Infectious Diseases,
    [SISMID](https://sph.emory.edu/SISMID/index.html).

-   The materials build on [previous versions of this course and related
    courses](../acknowledge.html).

-   Licensed under the [Creative Commons Attribution-NonCommercial
    license](https://creativecommons.org/licenses/by-nc/4.0/). Please
    share and remix non-commercially, mentioning its origin.
    \includegraphics[height=12pt]{../graphics/cc-by-nc}

-   Produced with R version `r getRversion()` and pomp version
    `r packageVersion("pomp")`.

-   Compiled on 2025-07-23.

\vfill

[Back to Lesson](index.html)

[`R` code for this lesson](./main.R)
